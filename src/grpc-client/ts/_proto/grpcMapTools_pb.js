/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.grpcMapTools.AddRequest', null, global);
goog.exportSymbol('proto.grpcMapTools.Answer', null, global);
goog.exportSymbol('proto.grpcMapTools.Point', null, global);
goog.exportSymbol('proto.grpcMapTools.PointInPolyReply', null, global);
goog.exportSymbol('proto.grpcMapTools.PointInPolyRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpcMapTools.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpcMapTools.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpcMapTools.Point.displayName = 'proto.grpcMapTools.Point';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpcMapTools.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.grpcMapTools.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpcMapTools.Point} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpcMapTools.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
    lng: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    lat: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpcMapTools.Point}
 */
proto.grpcMapTools.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpcMapTools.Point;
  return proto.grpcMapTools.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpcMapTools.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpcMapTools.Point}
 */
proto.grpcMapTools.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLng(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.grpcMapTools.Point} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.Point.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpcMapTools.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.Point.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLng();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getLat();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float lng = 1;
 * @return {number}
 */
proto.grpcMapTools.Point.prototype.getLng = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.grpcMapTools.Point.prototype.setLng = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float lat = 2;
 * @return {number}
 */
proto.grpcMapTools.Point.prototype.getLat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.grpcMapTools.Point.prototype.setLat = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpcMapTools.PointInPolyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.grpcMapTools.PointInPolyRequest.repeatedFields_, null);
};
goog.inherits(proto.grpcMapTools.PointInPolyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpcMapTools.PointInPolyRequest.displayName = 'proto.grpcMapTools.PointInPolyRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.grpcMapTools.PointInPolyRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpcMapTools.PointInPolyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpcMapTools.PointInPolyRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpcMapTools.PointInPolyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    point: (f = msg.getPoint()) && proto.grpcMapTools.Point.toObject(includeInstance, f),
    polyList: jspb.Message.toObjectList(msg.getPolyList(),
    proto.grpcMapTools.Point.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpcMapTools.PointInPolyRequest}
 */
proto.grpcMapTools.PointInPolyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpcMapTools.PointInPolyRequest;
  return proto.grpcMapTools.PointInPolyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpcMapTools.PointInPolyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpcMapTools.PointInPolyRequest}
 */
proto.grpcMapTools.PointInPolyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.grpcMapTools.Point;
      reader.readMessage(value,proto.grpcMapTools.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = new proto.grpcMapTools.Point;
      reader.readMessage(value,proto.grpcMapTools.Point.deserializeBinaryFromReader);
      msg.addPoly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.grpcMapTools.PointInPolyRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.PointInPolyRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.PointInPolyRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.grpcMapTools.Point.serializeBinaryToWriter
    );
  }
  f = this.getPolyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.grpcMapTools.Point.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point point = 1;
 * @return {?proto.grpcMapTools.Point}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.getPoint = function() {
  return /** @type{?proto.grpcMapTools.Point} */ (
    jspb.Message.getWrapperField(this, proto.grpcMapTools.Point, 1));
};


/** @param {?proto.grpcMapTools.Point|undefined} value */
proto.grpcMapTools.PointInPolyRequest.prototype.setPoint = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.grpcMapTools.PointInPolyRequest.prototype.clearPoint = function() {
  this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Point poly = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.grpcMapTools.Point>}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.getPolyList = function() {
  return /** @type{!Array.<!proto.grpcMapTools.Point>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.grpcMapTools.Point, 2));
};


/** @param {!Array.<!proto.grpcMapTools.Point>} value */
proto.grpcMapTools.PointInPolyRequest.prototype.setPolyList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.grpcMapTools.Point=} opt_value
 * @param {number=} opt_index
 * @return {!proto.grpcMapTools.Point}
 */
proto.grpcMapTools.PointInPolyRequest.prototype.addPoly = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.grpcMapTools.Point, opt_index);
};


proto.grpcMapTools.PointInPolyRequest.prototype.clearPolyList = function() {
  this.setPolyList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpcMapTools.PointInPolyReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpcMapTools.PointInPolyReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpcMapTools.PointInPolyReply.displayName = 'proto.grpcMapTools.PointInPolyReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpcMapTools.PointInPolyReply.prototype.toObject = function(opt_includeInstance) {
  return proto.grpcMapTools.PointInPolyReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpcMapTools.PointInPolyReply} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpcMapTools.PointInPolyReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    ispointinpoly: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpcMapTools.PointInPolyReply}
 */
proto.grpcMapTools.PointInPolyReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpcMapTools.PointInPolyReply;
  return proto.grpcMapTools.PointInPolyReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpcMapTools.PointInPolyReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpcMapTools.PointInPolyReply}
 */
proto.grpcMapTools.PointInPolyReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspointinpoly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.grpcMapTools.PointInPolyReply} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.PointInPolyReply.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpcMapTools.PointInPolyReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.PointInPolyReply.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIspointinpoly();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isPointInPoly = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.grpcMapTools.PointInPolyReply.prototype.getIspointinpoly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.grpcMapTools.PointInPolyReply.prototype.setIspointinpoly = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpcMapTools.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpcMapTools.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpcMapTools.Answer.displayName = 'proto.grpcMapTools.Answer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpcMapTools.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.grpcMapTools.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpcMapTools.Answer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpcMapTools.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpcMapTools.Answer}
 */
proto.grpcMapTools.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpcMapTools.Answer;
  return proto.grpcMapTools.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpcMapTools.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpcMapTools.Answer}
 */
proto.grpcMapTools.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.grpcMapTools.Answer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.Answer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpcMapTools.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.Answer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAnswer();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 answer = 1;
 * @return {number}
 */
proto.grpcMapTools.Answer.prototype.getAnswer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpcMapTools.Answer.prototype.setAnswer = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.grpcMapTools.AddRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.grpcMapTools.AddRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.grpcMapTools.AddRequest.displayName = 'proto.grpcMapTools.AddRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.grpcMapTools.AddRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.grpcMapTools.AddRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.grpcMapTools.AddRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.grpcMapTools.AddRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: jspb.Message.getFieldWithDefault(msg, 1, 0),
    b: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.grpcMapTools.AddRequest}
 */
proto.grpcMapTools.AddRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.grpcMapTools.AddRequest;
  return proto.grpcMapTools.AddRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.grpcMapTools.AddRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.grpcMapTools.AddRequest}
 */
proto.grpcMapTools.AddRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.grpcMapTools.AddRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.AddRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.grpcMapTools.AddRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.grpcMapTools.AddRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getA();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getB();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 a = 1;
 * @return {number}
 */
proto.grpcMapTools.AddRequest.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.grpcMapTools.AddRequest.prototype.setA = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 b = 2;
 * @return {number}
 */
proto.grpcMapTools.AddRequest.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.grpcMapTools.AddRequest.prototype.setB = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.grpcMapTools);
