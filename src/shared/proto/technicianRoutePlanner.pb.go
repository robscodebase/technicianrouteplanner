// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/technicianRoutePlanner.proto

/*
Package technicianRoutePlanner is a generated protocol buffer package.

It is generated from these files:
	proto/technicianRoutePlanner.proto

It has these top-level messages:
	RoutePlannerRequest
	RoutePlannerReply
*/
package technicianRoutePlanner

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RoutePlannerRequest struct {
	RouteName        *string `protobuf:"bytes,1,req,name=routeName" json:"routeName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RoutePlannerRequest) Reset()                    { *m = RoutePlannerRequest{} }
func (m *RoutePlannerRequest) String() string            { return proto.CompactTextString(m) }
func (*RoutePlannerRequest) ProtoMessage()               {}
func (*RoutePlannerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RoutePlannerRequest) GetRouteName() string {
	if m != nil && m.RouteName != nil {
		return *m.RouteName
	}
	return ""
}

type RoutePlannerReply struct {
	LineNumbers           []float64 `protobuf:"fixed64,1,rep,name=lineNumbers" json:"lineNumbers,omitempty"`
	Sizeofclickedcellsmap *float64  `protobuf:"fixed64,2,req,name=sizeofclickedcellsmap" json:"sizeofclickedcellsmap,omitempty"`
	XXX_unrecognized      []byte    `json:"-"`
}

func (m *RoutePlannerReply) Reset()                    { *m = RoutePlannerReply{} }
func (m *RoutePlannerReply) String() string            { return proto.CompactTextString(m) }
func (*RoutePlannerReply) ProtoMessage()               {}
func (*RoutePlannerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RoutePlannerReply) GetLineNumbers() []float64 {
	if m != nil {
		return m.LineNumbers
	}
	return nil
}

func (m *RoutePlannerReply) GetSizeofclickedcellsmap() float64 {
	if m != nil && m.Sizeofclickedcellsmap != nil {
		return *m.Sizeofclickedcellsmap
	}
	return 0
}

func init() {
	proto.RegisterType((*RoutePlannerRequest)(nil), "technicianRoutePlanner.RoutePlannerRequest")
	proto.RegisterType((*RoutePlannerReply)(nil), "technicianRoutePlanner.RoutePlannerReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RoutePlanner service

type RoutePlannerClient interface {
	RoutePlanner(ctx context.Context, in *RoutePlannerRequest, opts ...grpc.CallOption) (*RoutePlannerReply, error)
}

type routePlannerClient struct {
	cc *grpc.ClientConn
}

func NewRoutePlannerClient(cc *grpc.ClientConn) RoutePlannerClient {
	return &routePlannerClient{cc}
}

func (c *routePlannerClient) RoutePlanner(ctx context.Context, in *RoutePlannerRequest, opts ...grpc.CallOption) (*RoutePlannerReply, error) {
	out := new(RoutePlannerReply)
	err := grpc.Invoke(ctx, "/technicianRoutePlanner.routePlanner/RoutePlanner", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoutePlanner service

type RoutePlannerServer interface {
	RoutePlanner(context.Context, *RoutePlannerRequest) (*RoutePlannerReply, error)
}

func RegisterRoutePlannerServer(s *grpc.Server, srv RoutePlannerServer) {
	s.RegisterService(&_RoutePlanner_serviceDesc, srv)
}

func _RoutePlanner_RoutePlanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutePlannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutePlannerServer).RoutePlanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/technicianRoutePlanner.routePlanner/RoutePlanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutePlannerServer).RoutePlanner(ctx, req.(*RoutePlannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoutePlanner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "technicianRoutePlanner.routePlanner",
	HandlerType: (*RoutePlannerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoutePlanner",
			Handler:    _RoutePlanner_RoutePlanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/technicianRoutePlanner.proto",
}

func init() { proto.RegisterFile("proto/technicianRoutePlanner.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 192 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x49, 0x4d, 0xce, 0xc8, 0xcb, 0x4c, 0xce, 0x4c, 0xcc, 0x0b, 0xca, 0x2f, 0x2d,
	0x49, 0x0d, 0xc8, 0x49, 0xcc, 0xcb, 0x4b, 0x2d, 0xd2, 0x03, 0x4b, 0x0a, 0x89, 0x61, 0x97, 0x55,
	0x32, 0xe6, 0x12, 0x46, 0xe6, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xc9, 0x70, 0x71,
	0x16, 0x81, 0x84, 0xfd, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x98, 0x34, 0x38, 0x83, 0x10, 0x02,
	0x4a, 0xd9, 0x5c, 0x82, 0xa8, 0x9a, 0x0a, 0x72, 0x2a, 0x85, 0x14, 0xb8, 0xb8, 0x73, 0x32, 0xf3,
	0x52, 0xfd, 0x4a, 0x73, 0x93, 0x52, 0x8b, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x18, 0x83, 0x90,
	0x85, 0x84, 0x4c, 0xb8, 0x44, 0x8b, 0x33, 0xab, 0x52, 0xf3, 0xd3, 0x92, 0x73, 0x32, 0x93, 0xb3,
	0x53, 0x53, 0x92, 0x53, 0x73, 0x72, 0x8a, 0x73, 0x13, 0x0b, 0x24, 0x98, 0x14, 0x98, 0x34, 0x18,
	0x83, 0xb0, 0x4b, 0x1a, 0x55, 0x70, 0xf1, 0x14, 0x21, 0x59, 0x26, 0x94, 0xc1, 0xc5, 0x83, 0x6c,
	0xb9, 0x90, 0xb6, 0x1e, 0x0e, 0x8f, 0x63, 0xf1, 0x97, 0x94, 0x26, 0x71, 0x8a, 0x0b, 0x72, 0x2a,
	0x95, 0x18, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0x18, 0xc5, 0x2a, 0xd8, 0x58, 0x01, 0x00, 0x00,
}
